{"version":3,"file":"static/js/812.49031b58.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px',\r\n    objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error img\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n    const [character, setCharacter] = useState([]);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (character) => {\n        setCharacter(character);\n    }\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, [])\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // random ID\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n     \n\n    return (\n        <div className=\"randomchar\"> \n            {setContent(process, View, 'spinner', character)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => { \n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit': 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n                    <img src={thumbnail} alt=\"Random character\" className='randomchar__img' style={imgStyle}/>\n                    <div className=\"randomchar__info\">\n                        <p className=\"randomchar__name\">{name}</p>\n                        <p className=\"randomchar__descr\">\n                            {description}\n                        </p>\n                        <div className=\"randomchar__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, ComponentView, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemLoading ? <ComponentView/> : <Spinner/>;\n            break;\n        case 'confirmed':\n            return <ComponentView/>;\n            break;\n        case 'error':\n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [offset, setOffset] = useState(210);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [characterEnded, setCharactedEnded] = useState(false);\n    const animateDuration = 400;\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, init) => {\n        init ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset) // default parameter on load\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = async(newCharacterList) => {\n        let ended = false;\n        if (newCharacterList.length < 9) {\n            ended = true;\n        }\n\n        setCharList([...charList, ...newCharacterList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharactedEnded(characterEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderList = (charList) => {\n        console.log('render');\n        const items = charList.map((item, i) => {\n            let imgStyle = {'objectFit': 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit': 'unset'};\n            }\n\n            return (\n                <CSSTransition key={i} \n                               classNames=\"char__item\"\n                               timeout={animateDuration} >\n                    <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={li => itemRefs.current[i] = li}\n                    onClick={() => { \n                        props.onCharSelected(item.id); \n                        focusOnItem(i); \n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n                <ul className=\"char__grid\">\n                    <TransitionGroup component={null}>\n                        {items}\n                    </TransitionGroup>\n                </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderList(charList), newItemLoading);\n    }, [process])\n\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': characterEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [character, setCharacter] = useState(null);\n\n    const {clearError, getCharacter, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const onCharLoaded = (character) => {\n        setCharacter(character);\n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return; // stop\n        }\n\n        clearError();\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, 'skeleton', character)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    \n    let imgStyle = {'objectFit': 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\n                    {\n                        comics.map((item, i) => {\n                            const comicURI = item.resourceURI;\n                            const comicId = comicURI.substring(comicURI.lastIndexOf('/') + 1); \n                            if (i < 10) {\n                                return (\n                                    <Link to={`/comics/${comicId}`} key={i} className=\"char__comics-item\">\n                                        {item.name}\n                                    </Link>\n                                )\n                            }\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n\r\n    this.setState({\r\n      error: true,\r\n    })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.error) {\r\n      return <ErrorMessage/>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState();\r\n  \r\n  const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded);\r\n  }\r\n\r\n  const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n  const statusMessage = loading ? null : <div className=\"char__search-error\">\r\n    The character was not found. Check the name and try again</div>;\r\n  const spinner = loading ? <div className=\"small-spinner\"><Spinner/></div> : null;\r\n  const result = !char ? null : char.length > 0 && !loading ? <div className=\"char__search-wrapper\">\r\n    <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n    <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n      <div className=\"inner\">To page</div>\r\n    </Link>\r\n  </div> : statusMessage;\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: ''\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string()\r\n                   .required('This field is required'),\r\n        })}\r\n        onSubmit={ ({charName}) => {updateChar(charName)} }>\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                      <div>\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <FormikErrorMessage className=\"char__search-error\" name=\"charName\" component=\"div\"/>\r\n                      </div>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">Find</div>\r\n                        </button>\r\n                    </div>\r\n                </Form>\r\n        </Formik>\r\n        {errorMessage}\r\n        {result}\r\n        {spinner}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\"\r\n              content=\"Marvel information portal\"\r\n        />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n          </ErrorBoundary>\r\n          <div className=\"char__content\">\r\n              <ErrorBoundary>\r\n                  <CharList onCharSelected={onCharSelected}/>\r\n              </ErrorBoundary>\r\n              <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharSearchForm/>\r\n                </ErrorBoundary>\r\n              </div>\r\n          </div>\r\n          <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from '../hooks/http.hook'\r\nconst useMarvelService = () => {\r\n  const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=0ed2899c8bfcf1af69d77c6f3fde918b';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\r\n    }\r\n  }\r\n\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      id: character.id,\r\n      name: character.name,\r\n      description: character.description ? `${character.description.slice(0, 210)}...` : 'This is no information about this character :(',\r\n      thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    }\r\n  }\r\n\r\n  return {\r\n    loading, \r\n    error, \r\n    process,\r\n    setProcess,\r\n    clearError,\r\n    getAllCharacters, \r\n    getAllComics,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getComics,\r\n  }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {\r\n    'Content-Type': 'application/json'\r\n  }) => {\r\n\r\n    setLoading(true);\r\n    setProcess('loading');\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers})\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n\r\n      return data;\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setError(err.message);\r\n      setProcess('error');\r\n\r\n      throw err;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return {\r\n    loading: loading, \r\n    request: request, \r\n    error: error, \r\n    clearError: clearError,\r\n    process: process,\r\n    setProcess: setProcess,\r\n  };\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            \n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__square\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\n\r\nconst setContent = (process, ComponentView, loadingType, data) => {\r\n  switch (process) {\r\n      case 'waiting':\r\n          return <p className=\"char__select\">Please select a character to see information</p>\r\n      case 'loading':\r\n          return (loadingType === 'skeleton') ? <Skeleton/> : <Spinner/>;\r\n      case 'confirmed':\r\n          return <ComponentView data={data}/>;\r\n      case 'error':\r\n          return <ErrorMessage/>;\r\n      default: \r\n          throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","character","setCharacter","useMarvelService","getCharacter","clearError","process","setProcess","onCharLoaded","useEffect","updateChar","timerId","setInterval","clearInterval","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","offset","setOffset","newItemLoading","setNewItemLoading","characterEnded","setCharactedEnded","getAllCharacters","onRequest","init","onCharListLoaded","newCharacterList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","ComponentView","Spinner","ErrorMessage","Error","console","log","items","map","i","CSSTransition","classNames","timeout","tabIndex","ref","li","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderList","disabled","comics","comicURI","resourceURI","comicId","substring","lastIndexOf","to","charId","ErrorBoundary","state","error","errorInfo","this","setState","children","Component","char","setChar","loading","getCharacterByName","errorMessage","statusMessage","spinner","result","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","Helmet","content","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","message","useHttp","_apiBase","_apiKey","res","results","_transformCharacter","getAllComics","_transformComics","getComics","title","pageCount","path","extension","language","textObjects","price","prices","slice","urls","loadingType"],"sourceRoot":""}