{"version":3,"file":"static/js/852.a77d6e4c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/banner/Banner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px',\r\n    objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error img\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState } from 'react';\r\n\r\nimport './banner.scss';\r\n\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <div className=\"banner\">\r\n      <div className=\"banner-container\">\r\n        <div className=\"banner-avengers\">\r\n          <div className=\"banner-avengers__img\">\r\n            <img src={avengers} alt=\"\" />\r\n          </div>\r\n          <div className=\"banner-avengers__text\">\r\n            <p>New comics every week!</p>\r\n            <p>Stay tuned!</p>\r\n        </div>\r\n        </div>\r\n        <div className=\"banner__logo\">\r\n          <img src={avengersLogo} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Banner;\r\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst setContent = (process, ComponentView, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemLoading ? <ComponentView/> : <Spinner/>;\n            break;\n        case 'confirmed':\n            return <ComponentView/>;\n            break;\n        case 'error':\n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n  }\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [offset, setOffset] = useState(210);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [comicsEnded, setComicsEnded] = useState(false);\n    const animateDuration = 400;\n\n    const {loading, error, getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, init) => {\n        init ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'));\n        console.log('request')\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 8);\n        setComicsEnded(comicsEnded => ended);\n    }\n\n    const renderList = (comicsList) => {\n        const items = comicsList.map((item, i) => {\n        let imgStyle = {'objectFit': 'cover'};\n\n        if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = {'objectFit': 'unset'};\n        }\n\n            return (\n                <CSSTransition key={i}\n                               classNames=\"comics__item\"\n                               timeout={animateDuration}>\n                    <li className=\"comics__item\"\n                        tabIndex={0}>\n                        <Link to={`/comics/${item.id}`}>\n                            <img src={item.thumbnail} alt={item.title} style={imgStyle} className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price}</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderList(comicsList), newItemLoading)}\n            <button className=\"button button__main button__long\">\n                <div className=\"inner\"\n                     disabled={newItemLoading}\n                     style={{'display': comicsEnded ? 'none' : 'block'}}\n                     onClick={() => onRequest(offset)}>load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from 'react-helmet';\r\nimport Banner from '../banner/Banner';\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\"\r\n              content=\"Page with list of our comics\"\r\n        />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <Banner/>\r\n      <ComicsList/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsPage;","import { useHttp } from '../hooks/http.hook'\r\nconst useMarvelService = () => {\r\n  const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=0ed2899c8bfcf1af69d77c6f3fde918b';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\r\n    }\r\n  }\r\n\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      id: character.id,\r\n      name: character.name,\r\n      description: character.description ? `${character.description.slice(0, 210)}...` : 'This is no information about this character :(',\r\n      thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    }\r\n  }\r\n\r\n  return {\r\n    loading, \r\n    error, \r\n    process,\r\n    setProcess,\r\n    clearError,\r\n    getAllCharacters, \r\n    getAllComics,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getComics,\r\n  }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {\r\n    'Content-Type': 'application/json'\r\n  }) => {\r\n\r\n    setLoading(true);\r\n    setProcess('loading');\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers})\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n\r\n      return data;\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setError(err.message);\r\n      setProcess('error');\r\n\r\n      throw err;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return {\r\n    loading: loading, \r\n    request: request, \r\n    error: error, \r\n    clearError: clearError,\r\n    process: process,\r\n    setProcess: setProcess,\r\n  };\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","className","avengers","avengersLogo","setContent","process","ComponentView","newItemLoading","Spinner","ErrorMessage","Error","useState","comicsList","setComicsList","offset","setOffset","setNewItemLoading","comicsEnded","setComicsEnded","useMarvelService","getAllComics","loading","error","setProcess","useEffect","onRequest","init","then","onComicsListLoaded","console","log","newComicsList","ended","length","items","map","item","i","imgStyle","thumbnail","CSSTransition","classNames","timeout","tabIndex","to","id","title","price","TransitionGroup","component","renderList","disabled","onClick","Helmet","name","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","_transformComics","getCharacter","getCharacterByName","getComics","comics","description","pageCount","path","extension","language","textObjects","prices","character","slice","homepage","urls","wiki"],"sourceRoot":""}